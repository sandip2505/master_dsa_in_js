[
    {
        "day": 1,
        "title": "Basic Array Operations",
        "questions": [
            {
                "question": "Find the maximum number in an array",
                "difficulty": "Easy",
                "input": "[3, 5, 1, 8, 2]",
                "expected_output": "8",
                "explanation": "Iterate through the array and keep track of the largest value seen so far. Initially set max to the first element, then compare each element with max and update if necessary.",
                "solution": "function findMax(arr) {\n  if (arr.length === 0) return null;\n  let max = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  return max;\n}"
            },
            {
                "question": "Find the sum of all elements in an array",
                "difficulty": "Easy",
                "input": "[1, 2, 3, 4, 5]",
                "expected_output": "15",
                "explanation": "Iterate through each element in the array and maintain a running sum.",
                "solution": "function sumArray(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n}"
            }
        ]
    },
    {
        "day": 2,
        "title": "String Manipulation Basics",
        "questions": [
            {
                "question": "Reverse a string",
                "difficulty": "Easy",
                "input": "\"hello\"",
                "expected_output": "\"olleh\"",
                "explanation": "Convert the string to an array of characters, reverse the array, and join it back to a string.",
                "solution": "function reverseString(str) {\n  return str.split('').reverse().join('');\n}"
            },
            {
                "question": "Count the number of vowels in a string",
                "difficulty": "Easy",
                "input": "\"programming\"",
                "expected_output": "3",
                "explanation": "Iterate through each character of the string and check if it's a vowel (a, e, i, o, u).",
                "solution": "function countVowels(str) {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  let count = 0;\n  for (let char of str.toLowerCase()) {\n    if (vowels.includes(char)) {\n      count++;\n    }\n  }\n  return count;\n}"
            }
        ]
    },
    {
        "day": 3,
        "title": "Basic Mathematical Operations",
        "questions": [
            {
                "question": "Calculate factorial of a number",
                "difficulty": "Easy",
                "input": "5",
                "expected_output": "120",
                "explanation": "The factorial of a number is the product of all positive integers less than or equal to that number. For example, 5! = 5 × 4 × 3 × 2 × 1 = 120.",
                "solution": "function factorial(n) {\n  if (n === 0 || n === 1) return 1;\n  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n}"
            },
            {
                "question": "Check if a number is prime",
                "difficulty": "Easy",
                "input": "7",
                "expected_output": "true",
                "explanation": "A prime number is a natural number greater than 1 that is not a product of two smaller natural numbers. Check if there are any divisors between 2 and sqrt(n).",
                "solution": "function isPrime(n) {\n  if (n <= 1) return false;\n  if (n <= 3) return true;\n  if (n % 2 === 0 || n % 3 === 0) return false;\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0 || n % (i + 2) === 0) return false;\n  }\n  return true;\n}"
            }
        ]
    },
    {
        "day": 4,
        "title": "Conditional Logic",
        "questions": [
            {
                "question": "Check if a number is even or odd",
                "difficulty": "Easy",
                "input": "7",
                "expected_output": "\"odd\"",
                "explanation": "A number is even if it's divisible by 2 (remainder is 0 when divided by 2), otherwise it's odd.",
                "solution": "function checkEvenOdd(num) {\n  return num % 2 === 0 ? 'even' : 'odd';\n}"
            },
            {
                "question": "Check if a year is a leap year",
                "difficulty": "Easy",
                "input": "2024",
                "expected_output": "true",
                "explanation": "A leap year is divisible by 4, but not by 100 unless it's also divisible by 400.",
                "solution": "function isLeapYear(year) {\n  return (year % 4 === 0 && year % 100 !== 0) || (year % 400 === 0);\n}"
            }
        ]
    },
    {
        "day": 5,
        "title": "Array Transformation",
        "questions": [
            {
                "question": "Find the smallest number in an array",
                "difficulty": "Easy",
                "input": "[6, 2, 9, 1, 5]",
                "expected_output": "1",
                "explanation": "Similar to finding the maximum, iterate through the array keeping track of the smallest value seen so far.",
                "solution": "function findMin(arr) {\n  if (arr.length === 0) return null;\n  let min = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  return min;\n}"
            },
            {
                "question": "Square each element in an array",
                "difficulty": "Easy",
                "input": "[1, 2, 3, 4, 5]",
                "expected_output": "[1, 4, 9, 16, 25]",
                "explanation": "Create a new array where each element is the square of the corresponding element in the input array.",
                "solution": "function squareArray(arr) {\n  return arr.map(num => num * num);\n}"
            }
        ]
    },
    {
        "day": 6,
        "title": "Character Checking",
        "questions": [
            {
                "question": "Check if a character is a vowel",
                "difficulty": "Easy",
                "input": "\"e\"",
                "expected_output": "true",
                "explanation": "Check if the character is one of the vowels (a, e, i, o, u) ignoring case.",
                "solution": "function isVowel(char) {\n  return ['a', 'e', 'i', 'o', 'u'].includes(char.toLowerCase());\n}"
            },
            {
                "question": "Check if a character is a digit",
                "difficulty": "Easy",
                "input": "\"7\"",
                "expected_output": "true",
                "explanation": "Check if the ASCII value of the character falls within the range of digits (0-9).",
                "solution": "function isDigit(char) {\n  return /^\\d$/.test(char);\n}"
            }
        ]
    },
    {
        "day": 7,
        "title": "Temperature Conversion",
        "questions": [
            {
                "question": "Convert Celsius to Fahrenheit",
                "difficulty": "Easy",
                "input": "0",
                "expected_output": "32",
                "explanation": "The formula to convert from Celsius to Fahrenheit is: F = C × (9/5) + 32.",
                "solution": "function celsiusToFahrenheit(celsius) {\n  return celsius * (9/5) + 32;\n}"
            },
            {
                "question": "Convert Fahrenheit to Celsius",
                "difficulty": "Easy",
                "input": "98.6",
                "expected_output": "37",
                "explanation": "The formula to convert from Fahrenheit to Celsius is: C = (F - 32) × (5/9). Round to the nearest integer.",
                "solution": "function fahrenheitToCelsius(fahrenheit) {\n  return Math.round((fahrenheit - 32) * (5/9));\n}"
            }
        ]
    },
    {
        "day": 8,
        "title": "Pattern Generation",
        "questions": [
            {
                "question": "Print multiplication table of a number",
                "difficulty": "Easy",
                "input": "3",
                "expected_output": "[3, 6, 9, 12, 15, 18, 21, 24, 27, 30]",
                "explanation": "Generate an array containing the first 10 multiples of the given number.",
                "solution": "function multiplicationTable(num) {\n  const table = [];\n  for (let i = 1; i <= 10; i++) {\n    table.push(num * i);\n  }\n  return table;\n}"
            },
            {
                "question": "Generate a triangle pattern",
                "difficulty": "Easy",
                "input": "5",
                "expected_output": "[\"*\", \"**\", \"***\", \"****\", \"*****\"]",
                "explanation": "Create an array where each element is a string containing increasing number of asterisks.",
                "solution": "function trianglePattern(n) {\n  const pattern = [];\n  for (let i = 1; i <= n; i++) {\n    pattern.push('*'.repeat(i));\n  }\n  return pattern;\n}"
            }
        ]
    },
    {
        "day": 9,
        "title": "Variable Manipulation",
        "questions": [
            {
                "question": "Swap two variables",
                "difficulty": "Easy",
                "input": "a = 5, b = 10",
                "expected_output": "a = 10, b = 5",
                "explanation": "Swap the values of two variables without using a temporary variable.",
                "solution": "function swap(obj) {\n  // Destructuring syntax for swapping\n  [obj.a, obj.b] = [obj.b, obj.a];\n  return obj;\n}"
            },
            {
                "question": "Convert number to its binary representation",
                "difficulty": "Easy",
                "input": "10",
                "expected_output": "\"1010\"",
                "explanation": "Convert a decimal number to its binary representation as a string.",
                "solution": "function decimalToBinary(num) {\n  return num.toString(2);\n}"
            }
        ]
    },
    {
        "day": 10,
        "title": "Array Filtering",
        "questions": [
            {
                "question": "Filter out even numbers from an array",
                "difficulty": "Easy",
                "input": "[1, 2, 3, 4, 5, 6]",
                "expected_output": "[1, 3, 5]",
                "explanation": "Create a new array containing only the odd numbers from the input array.",
                "solution": "function filterOutEven(arr) {\n  return arr.filter(num => num % 2 !== 0);\n}"
            },
            {
                "question": "Find all numbers divisible by 3 in an array",
                "difficulty": "Easy",
                "input": "[1, 2, 3, 4, 5, 6, 9]",
                "expected_output": "[3, 6, 9]",
                "explanation": "Create a new array containing only the numbers that are divisible by 3 from the input array.",
                "solution": "function divisibleByThree(arr) {\n  return arr.filter(num => num % 3 === 0);\n}"
            }
        ]
    },
    {
        "day": 11,
        "title": "String Case Manipulation",
        "questions": [
            {
                "question": "Convert a string to uppercase",
                "difficulty": "Easy",
                "input": "\"hello world\"",
                "expected_output": "\"HELLO WORLD\"",
                "explanation": "Transform all characters in the string to uppercase using the toUpperCase method.",
                "solution": "function toUpperCase(str) {\n  return str.toUpperCase();\n}"
            },
            {
                "question": "Capitalize first letter of each word",
                "difficulty": "Easy",
                "input": "\"hello world\"",
                "expected_output": "\"Hello World\"",
                "explanation": "Split the string by spaces, capitalize the first letter of each word, and join them back.",
                "solution": "function capitalizeWords(str) {\n  return str.split(' ')\n    .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n    .join(' ');\n}"
            }
        ]
    },
    {
        "day": 12,
        "title": "Basic Recursion",
        "questions": [
            {
                "question": "Calculate factorial using recursion",
                "difficulty": "Easy",
                "input": "5",
                "expected_output": "120",
                "explanation": "Use recursion to calculate the factorial. The factorial of n is n multiplied by the factorial of (n-1).",
                "solution": "function factorialRecursive(n) {\n  if (n === 0 || n === 1) return 1;\n  return n * factorialRecursive(n - 1);\n}"
            },
            {
                "question": "Calculate sum of numbers from 1 to n using recursion",
                "difficulty": "Easy",
                "input": "5",
                "expected_output": "15",
                "explanation": "Use recursion to calculate the sum of numbers from 1 to n.",
                "solution": "function recursiveSum(n) {\n  if (n <= 1) return n;\n  return n + recursiveSum(n - 1);\n}"
            }
        ]
    },
    {
        "day": 13,
        "title": "Basic Searching Algorithms",
        "questions": [
            {
                "question": "Linear search in an array",
                "difficulty": "Easy",
                "input": "[1, 2, 3, 4, 5], target = 3",
                "expected_output": "2",
                "explanation": "Iterate through the array and return the index of the target element if found.",
                "solution": "function linearSearch(arr, target) {\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === target) {\n      return i;\n    }\n  }\n  return -1;\n}"
            },
            {
                "question": "Binary search in a sorted array",
                "difficulty": "Easy",
                "input": "[1, 2, 3, 4, 5], target = 4",
                "expected_output": "3",
                "explanation": "Use binary search algorithm to find the index of the target element in a sorted array.",
                "solution": "function binarySearch(arr, target) {\n  let left = 0;\n  let right = arr.length - 1;\n\n  while (left <= right) {\n    const mid = Math.floor((left + right) / 2);\n    if (arr[mid] === target) {\n      return mid;\n    } else if (arr[mid] < target) {\n      left = mid + 1;\n    } else {\n      right = mid - 1;\n    }\n  }\n\n  return -1;\n}"
            }
        ]
    },
    {
        "day": 14,
        "title": "Basic Sorting Algorithms",
        "questions": [
            {
                "question": "Bubble sort algorithm",
                "difficulty": "Easy",
                "input": "[5, 3, 8, 4, 2]",
                "expected_output": "[2, 3, 4, 5, 8]",
                "explanation": "Repeatedly step through the list, compare adjacent elements and swap them if they are in the wrong order.",
                "solution": "function bubbleSort(arr) {\n  const n = arr.length;\n  for (let i = 0; i < n - 1; i++) {\n    for (let j = 0; j < n - i - 1; j++) {\n      if (arr[j] > arr[j + 1]) {\n        [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\n      }\n    }\n  }\n  return arr;\n}"
            },
            {
                "question": "Selection sort algorithm",
                "difficulty": "Easy",
                "input": "[64, 25, 12, 22, 11]",
                "expected_output": "[11, 12, 22, 25, 64]",
                "explanation": "Find the minimum element in the unsorted array and swap it with the first unsorted element.",
                "solution": "function selectionSort(arr) {\n  const n = arr.length;\n\n  for (let i = 0; i < n - 1; i++) {\n    let minIndex = i;\n    for (let j = i + 1; j < n; j++) {\n      if (arr[j] < arr[minIndex]) {\n        minIndex = j;\n      }\n    }\n    [arr[i], arr[minIndex]] = [arr[minIndex], arr[i]];\n  }\n\n  return arr;\n}"
            }
        ]
    },
    {
        "day": 15,
        "title": "Basic Data Structures",
        "questions": [
            {
                "question": "Implement a stack using an array",
                "difficulty": "Easy",
                "input": "[1,2,3]",
                "expected_output": "[3,2,1]",
                "explanation": "A stack is a collection of elements that follows the Last In First Out (LIFO) principle. You can use an array to implement a stack by using push and pop methods.",
                "solution": "class Stack {\n  constructor() {\n    this.items = [];\n  }\n\n  push(element) {\n    this.items.push(element);\n  }\n\n  pop() {\n    return this.items.pop();\n  }\n\n  peek() {\n    return this.items[this.items.length - 1];\n  }\n\n  isEmpty() {\n    return this.items.length === 0;\n  }\n}"
            },
            {
                "question": "Implement a queue using an array",
                "difficulty": "Easy",
                "input": "[1,2,3]",
                "expected_output": "[1,2,3]",
                "explanation": "A queue is a collection of elements that follows the First In First Out (FIFO) principle. You can use an array to implement a queue by using push and shift methods.",
                "solution": "class Queue {\n  constructor() {\n    this.items = [];\n  }\n\n  enqueue(element) {\n    this.items.push(element);\n  }\n\n  dequeue() {\n    return this.items.shift();\n  }\n\n  front() {\n    return this.items[0];\n  }\n\n  isEmpty() {\n    return this.items.length === 0;\n  }\n}"
            }
        ]
    },
    {
        "day": 16,
        "title": "Basic Linked List Operations",
        "questions": [
            {
                "question": "Implement a singly linked list",
                "difficulty": "Easy",
                "input": "[1,2,3]",
                "expected_output": "[1,2,3]",
                "explanation": "A linked list is a linear data structure where each element is a separate object. Each element (node) of a list consists of two parts: data and a reference to the next node in the sequence.",
                "solution": "class Node {\n  constructor(data) {\n    this.data = data;\n    this.next = null;\n  }\n}\n\nclass LinkedList {\n  constructor() {\n    this.head = null;\n  }\n\n  append(data) {\n    const newNode = new Node(data);\n    if (!this.head) {\n      this.head = newNode;\n      return;\n    }\n    let current = this.head;\n    while (current.next) {\n      current = current.next;\n    }\n    current.next = newNode;\n  }\n}"
            },
            {
                "question": "Reverse a linked list",
                "difficulty": "Easy",
                "input": "[1,2,3]",
                "expected_output": "[3,2,1]",
                "explanation": "To reverse a linked list, you need to change the next pointers of each node so that they point to the previous node instead of the next one.",
                "solution": "function reverseLinkedList(head) {\n  let prev = null;\n  let current = head;\n  while (current) {\n    const nextNode = current.next;\n    current.next = prev;\n    prev = current;\n    current = nextNode;\n  }\n  return prev;\n}"
            }
        ]
    },
    {
        "day": 17,
        "title": "Basic Hash Table Operations",
        "questions": [
            {
                "question": "Implement a hash table",
                "difficulty": "Easy",
                "input": "[[\"key1\", \"value1\"], [\"key2\", \"value2\"]]",
                "expected_output": "{\"key1\": \"value1\", \"key2\": \"value2\"}",
                "explanation": "A hash table is a data structure that implements an associative array abstract data type, a structure that can map keys to values. It uses a hash function to compute an index into an array of buckets or slots.",
                "solution": "class HashTable {\n  constructor(size) {\n    this.size = size;\n    this.table = new Array(size);\n  }\n\n  hash(key) {\n    let hash = 0;\n    for (let i = 0; i < key.length; i++) {\n      hash += key.charCodeAt(i);\n    }\n    return hash % this.size;\n  }\n\n  set(key, value) {\n    const index = this.hash(key);\n    this.table[index] = value;\n  }\n\n  get(key) {\n    const index = this.hash(key);\n    return this.table[index];\n  }\n}"
            },
            {
                "question": "Check if a key exists in a hash table",
                "difficulty": "Easy",
                "input": "[[\"key1\", \"value1\"], [\"key2\", \"value2\"]], \"key1\"",
                "expected_output": "true",
                "explanation": "Use the hash function to find the index of the key and check if it exists in the hash table.",
                "solution": "function containsKey(hashTable, key) {\n  const index = hashTable.hash(key);\n  return hashTable.table[index] !== undefined;\n}"
            }
        ]
    },
    {
        "day": 18,
        "title": "Basic Tree Operations",
        "questions": [
            {
                "question": "Implement a binary tree",
                "difficulty": "Easy",
                "input": "[1,2,3]",
                "expected_output": "{\"value\": 1, \"left\": {\"value\": 2}, \"right\": {\"value\": 3}}",
                "explanation": "A binary tree is a tree data structure in which each node has at most two children referred to as the left child and the right child. Each node contains a value and references to its left and right children.",
                "solution": "class TreeNode {\n  constructor(value) {\n    this.value = value;\n    this.left = null;\n    this.right = null;\n  }\n}\n\nclass BinaryTree {\n  constructor() {\n    this.root = null;\n  }\n\n  insert(value) {\n    const newNode = new TreeNode(value);\n    if (!this.root) {\n      this.root = newNode;\n      return;\n    }\n    let current = this.root;\n    while (true) {\n      if (value < current.value) {\n        if (!current.left) {\n          current.left = newNode;\n          break;\n        }\n        current = current.left;\n      } else {\n        if (!current.right) {\n          current.right = newNode;\n          break;\n        }\n        current = current.right;\n      }\n    }\n  }\n}"
            },
            {
                "question": "Find the height of a binary tree",
                "difficulty": "Easy",
                "input": "{\"value\": 1, \"left\": {\"value\": 2}, \"right\": {\"value\": 3}}",
                "expected_output": "2",
                "explanation": "The height of a binary tree is the number of edges on the longest path from the root node to a leaf node.",
                "solution": "function height(node) {\n  if (!node) return -1;\n  return Math.max(height(node.left), height(node.right)) + 1;\n}"
            }
        ]
    }
]